name: Create Pull Request on new post

on:
  push:
    branches:
      - 'posts/*'
      - 'minis/*'

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get content's type and name
        id: branch_name
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}  # Extract branch name (without refs/heads/)
          if [[ "$BRANCH_NAME" == posts/* ]]; then
            CONTENT_TYPE="post"
          elif [[ "$BRANCH_NAME" == minis/* ]]; then
            CONTENT_TYPE="mini"
          else
            echo "Branch does not match expected prefixes."
            exit 1
          fi
          CONTENT_NAME=${BRANCH_NAME#*/}
          echo "content_type=$CONTENT_TYPE" >> $GITHUB_OUTPUT
          echo "content_name=$CONTENT_NAME" >> $GITHUB_OUTPUT

      - name: Check if new pull request is needed to create
        id: get_pr
        run: |
          EXISTED_PULLS_FOR_THE_BRANCH=$(gh pr list -B main -H ${{ github.ref_name }} --json id)
          echo "existed_pulls=$EXISTED_PULLS_FOR_THE_BRANCH" >> $GITHUB_OUTPUT
          echo ${{ github.ref_name }}
          echo $EXISTED_PULLS_FOR_THE_BRANCH
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        id: create_pr
        if: steps.get_pr.outputs.existed_pulls == '[]'
        run: |
          pr_url=$(gh pr create -B main -H "${{ github.ref_name }}" -t "Draft of ${{ steps.branch_name.outputs.content_type }} '${{ steps.branch_name.outputs.content_name }}'" -b "This pull request contains the draft for the ${{ steps.branch_name.outputs.content_type }} from branch ${{ steps.branch_name.outputs.content_name }}." -a dadyarri -d)
          pr_number=$(echo $pr_url | grep -oP '(?<=\/pull\/)\d+')
          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Jetbrains Mono font
        if: steps.get_pr.outputs.existed_pulls == '[]'
        id: install_font
        run: |
          wget -O jetbrains-mono.zip https://download.jetbrains.com/fonts/JetBrainsMono-2.304.zip
          unzip -d jetbrains-mono/ jetbrains-mono.zip
          mkdir -p /usr/share/fonts/
          mv jetbrains-mono/fonts/ttf/* /usr/share/fonts/
          rm -rf jetbrains-mono
          rm -rf jetbrains-mono.zip
          fc-cache -fv
          fc-list | grep -qi "jetbrains" || { echo "Font not installed"; exit 1; }

      - name: Checkout pull request branch
        if: steps.get_pr.outputs.existed_pulls == '[]'
        run: |
          gh pr checkout ${{ steps.create_pr.outputs.pr_number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate OG images
        id: generate_images
        if: steps.get_pr.outputs.existed_pulls == '[]'
        run: |
          cd bin
          chmod +x og-builder
          ./og-builder --theme dapollo --sections 'posts,minis'
        env:
          RUST_LOG: info

      - name: Push new OG images to the repo
        if: steps.get_pr.outputs.existed_pulls == '[]'
        run: |
          git add .
          git commit -m "updated og-images"
          git push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
