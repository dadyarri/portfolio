---
import type { TimelineItem } from "@type/cv";

interface Props {
  items: TimelineItem[];
  locale: "en-US" | "ru-RU";
}

const { items, locale } = Astro.props;

const translations = {
  "en-US": {
    ongoing: "Present",
    year: "yr",
    month: "mo",
    stack: "Stack",
  },
  "ru-RU": {
    ongoing: "н. в.",
    year: "г.",
    month: "мес.",
    stack: "Стек",
  },
};

const translation = translations[locale] || translations["en-US"];
---

<div class="cv-timeline">
  {
    items.map((item) => (
      <div class="cv-timeline-item">
        <div class="cv-timeline-content">
          <h3>{item.title}</h3>
          {item.subtitle && (
            <div class="cv-timeline-subtitle">
              <h4>
                {item.link ? (
                  <a href={item.link}>{item.subtitle}</a>
                ) : (
                  item.subtitle
                )}
              </h4>
              <div class="cv-timeline-date">
                {new Date(item.date.start).toLocaleString(locale, {
                  month: "long",
                  year: "numeric",
                })}
                {" - "}
                {item.date.end
                  ? new Date(item.date.end).toLocaleString(locale, {
                      month: "long",
                      year: "numeric",
                    })
                  : translation.ongoing}
                {item.date.showAmountOfTime &&
                  (() => {
                    const start = new Date(item.date.start);
                    const end = item.date.end
                      ? new Date(item.date.end)
                      : new Date();
                    const months =
                      (end.getFullYear() - start.getFullYear()) * 12 +
                      (end.getMonth() - start.getMonth());
                    const years = Math.floor(months / 12);
                    const remMonths = months % 12;
                    let result = "";
                    if (years > 0) result += `${years} ${translation.year}`;
                    if (remMonths > 0)
                      result +=
                        (years > 0 ? " " : "") +
                        `${remMonths} ${translation.month}`;
                    return ` (${result})`;
                  })()}
              </div>
            </div>
          )}
          {item.description && (
            <ol>
              {item.description.map((point, index) => {
                let lineEnd =
                  index === item.description!.length - 1 ? "." : ";";
                return <li>{`${point}${lineEnd}`}</li>;
              })}
            </ol>
          )}
          {item.stack && (
            <p>
              <strong>{translation.stack}:</strong> {item.stack.join(", ")}
            </p>
          )}
        </div>
      </div>
    ))
  }
</div>

<style lang="scss">
  .cv-timeline {
    position: relative;

    &::before {
      content: "";
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 2px;
      background: var(--theme-color);
    }

    &-subtitle {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin: 0.5rem 0;

      h4 {
        margin: 0;
        font-size: 1.1rem;
        color: var(--text-1);

        @media print {
          color: black;
        }
      }

      .cv-timeline-date {
        color: var(--text-1);
        font-size: 0.9rem;
        white-space: nowrap;

        @media print {
          color: black;
        }
      }
    }

    &-item {
      position: relative;
      padding-left: 2rem;
      margin-bottom: 2rem;

      &::before {
        content: "";
        position: absolute;
        left: -0.5rem;
        top: 0.5rem;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
        background: var(--theme-color);
      }
    }
  }
</style>
