---
import Header from "@components/Header.astro";
import PageTitle from "@components/PageTitle.astro";
import PostInfo from "@components/PostInfo.astro";
import TableOfContents from "@components/TableOfContents.astro";
import "@styles/main.scss";
import { getTagLabel } from "@utils/content";
import { splitArrayByElement, stripHtml } from "@utils/data";
import type { MarkdownHeading } from "astro";
import type { CollectionEntry } from "astro:content";

type Props = {
    post: CollectionEntry<"posts">;
    headings: MarkdownHeading[];
};

const { post, headings } = Astro.props;

const preview = stripHtml(
    splitArrayByElement(
        post.rendered?.html.split("\n")!,
        "<!--more-->",
    ).preview.join(""),
);

const url = `https://dadyarri.ru/${post.collection}/${post.id}`;
const imageUrl = url; // TODO

const ld = {
    "@context": "https://schema.org",
    "@type": "Article",
    headline: post.data.title,
    description: preview,
    image: imageUrl,
    author: {
        "@type": "Person",
        name: "dadyarri",
        url: "https://t.me/dadyarri",
    },
    datePublished: post.data.date.toISOString(),
    mainEntityOfPage: {
        "@type": "WebPage",
        "@id": url,
    },
};
---

<!doctype html>
<html lang="ru">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />

        <meta name="robots" content="index, follow" />

        <meta property="og:site_name" content="Личный блог dadyarri" />
        <meta property="og:locale" content="ru_RU" />

        <title>{post.data.title}</title>
        <meta property="og:title" content={post.data.title} />

        <meta name="description" content={preview} />
        <meta property="og:description" content={preview} />

        <meta property="og:type" content="article" />
        <meta
            property="article:published_time"
            content={post.data.date.toISOString()}
        />
        <meta property="article:author" content="https://t.me/dadyarri" />
        <meta property="article:section" content="Tech" />

        {
            post.data.tags.map(async (tag) => (
                <meta property="article:tag" content={await getTagLabel(tag.id)} />
            ))
        }

        <meta property="og:url" content={url} />
        <link rel="canonical" href={url} />

        <meta property="og:image" content={imageUrl} />

        <script type="application/ld+json" set:html={JSON.stringify(ld)} />
    </head>
    <body>
        <div class="content">
            <Header />
            <PageTitle title={post.data.title} />
            <PostInfo post={post} />
            {headings.length > 0 && <TableOfContents headings={headings}/>}
            <slot />
        </div>
    </body>
</html>
